[OpPop]
code = """{ pop_Stack(stack); }"""
[OpPush]
code = """{ push_Stack(stack, frame->v_ins->data[reg->pc++]); }"""
[OpAllocLvars]
code = """{
  long long int vars = (long long int)frame->v_ins->data[reg->pc++]->ptr;
  frame->lvars = new_vec_with(vars);
}"""
[OpFreeLvars]
code = """{ free_vec(frame->lvars); }"""
[OpGetLocal]
code = """{
  long long int var_idx = (long long int)frame->v_ins->data[reg->pc++]->ptr;
  push_Stack(stack, frame->lvars->data[var_idx]);
}"""
[OpSetLocal]
code = """{
  long long int var_idx = (long long int)frame->v_ins->data[reg->pc++]->ptr;
  frame->lvars->data[var_idx] = pop_Stack(stack);
}"""
[OpSetArgLocal]
code = """{
  long long int var_idx = (long long int)frame->v_ins->data[reg->pc++]->ptr;
  frame->lvars->data[var_idx] = frame->args->data[var_idx];
}"""
[OpAdd]
code = """{
  double r = get_float_val(pop_SexpObject_from_stack(stack));
  double l = get_float_val(pop_SexpObject_from_stack(stack));
  push_Stack_VValue(stack, new_SexpObject_float(l + r));
}"""
[OpSub]
code = """{
  double r = get_float_val(pop_SexpObject_from_stack(stack));
  double l = get_float_val(pop_SexpObject_from_stack(stack));
  push_Stack_VValue(stack, new_SexpObject_float(l - r));
}"""
[OpMul]
code = """{
  double r = get_float_val(pop_SexpObject_from_stack(stack));
  double l = get_float_val(pop_SexpObject_from_stack(stack));
  push_Stack_VValue(stack, new_SexpObject_float(l * r));
}"""
[OpDiv]
code = """{
  double r = get_float_val(pop_SexpObject_from_stack(stack));
  double l = get_float_val(pop_SexpObject_from_stack(stack));
  push_Stack_VValue(stack, new_SexpObject_float(l / r));
}"""
[OpMod]
code = """{
  double r = get_float_val(pop_SexpObject_from_stack(stack));
  double l = get_float_val(pop_SexpObject_from_stack(stack));
  push_Stack_VValue(stack, new_SexpObject_float(dmod(l, r)));
}"""
[OpEq]
code = """{ 
  VMValue *r;
  VMValue *l;
  POP_STACK_WITH_FREE(stack, r);
  POP_STACK_WITH_FREE(stack, l);
  push_Stack_VValue(stack, new_SexpObject_bool(cmp_VMValue(l, r) == 0));
}"""
[OpNeq]
code = """{
  VMValue *r;
  VMValue *l;
  POP_STACK_WITH_FREE(stack, r);
  POP_STACK_WITH_FREE(stack, l);
  push_Stack_VValue(stack, new_SexpObject_bool(cmp_VMValue(l, r) != 0));
}"""
[OpLt]
code = """{
  VMValue *r;
  VMValue *l;
  POP_STACK_WITH_FREE(stack, r);
  POP_STACK_WITH_FREE(stack, l);
  push_Stack_VValue(stack, new_SexpObject_bool(cmp_VMValue(l, r) < 0));
}"""
[OpLeq]
code = """{
  VMValue *r;
  VMValue *l;
  POP_STACK_WITH_FREE(stack, r);
  POP_STACK_WITH_FREE(stack, l);
  push_Stack_VValue(stack, new_SexpObject_bool(cmp_VMValue(l, r) <= 0));
}"""
[OpGt]
code = """{
  VMValue *r;
  VMValue *l;
  POP_STACK_WITH_FREE(stack, r);
  POP_STACK_WITH_FREE(stack, l);
  push_Stack_VValue(stack, new_SexpObject_bool(cmp_VMValue(l, r) > 0));
}"""
[OpGeq]
code = """{
  VMValue *r;
  VMValue *l;
  POP_STACK_WITH_FREE(stack, r);
  POP_STACK_WITH_FREE(stack, l);
  push_Stack_VValue(stack, new_SexpObject_bool(cmp_VMValue(l, r) >= 0));
}"""
[OpPrint]
code = """{
  GeneralPointer **values = xnewN(GeneralPointer *, bop_argc);
  for (size_t i = 0; i < bop_argc; i++) {
    values[bop_argc - i - 1] = pop_Stack(stack);
  }
  VMValue *val;
  for (size_t i = 0; bop_argc > 0; bop_argc--, i++) {
    val = values[i]->ptr;
    printf("%s", show_VMValue(val));
    free_GeneralPointer(values[i]);
  }
  free(values);
}"""
[OpPrintln]
code = """{
  GeneralPointer **values = xnewN(GeneralPointer *, bop_argc);
  for (size_t i = 0; i < bop_argc; i++) {
    values[bop_argc - i - 1] = pop_Stack(stack);
  }
  VMValue *val;
  for (size_t i = 0; bop_argc > 0; bop_argc--, i++) {
    val = values[i]->ptr; printf("%s", show_VMValue(val));
    free_GeneralPointer(values[i]);
  }
  printf("\\n");
  free(values);
}"""
[OpJumpRel]
code = """{
  long long int lv = (long long int)(intptr_t)frame->v_ins->data[reg->pc++]->ptr;
  reg->pc += lv;
}"""
[OpFuncDef]
code = """{
  VMValue *vfptr = frame->v_ins->data[reg->pc++]->ptr;
  VMFunction *vmf = get_func_VMValue(vfptr);
  insert_Env(frame->env, vmf->name, vfptr);
}"""
[OpCall]
code = """{
  sds func_name = (sds)frame->v_ins->data[reg->pc++]->ptr;
  int bop = get_builtin(func_name);
  if (bop != -1) {
      op = bop;
      bop_argc = (size_t)frame->v_ins->data[reg->pc++]->ptr;
      #ifdef __ENABLE_DIRECT_THREADED_CODE__
        goto L_OP_SELECT;
      #else
        goto OP_SELECT;
      #endif
  }

  VMValue *v = get_Env(frame->env, func_name);
  if (v == NULL) {
      fprintf(stderr, "No such a function : %s\\n", func_name);
      exit(EXIT_FAILURE);
  }

  VMFunction *vmf = get_func_VMValue(v);
  size_t argc = (size_t)frame->v_ins->data[reg->pc++]->ptr;
  Frame *new_frame = new_Frame();
  new_frame->env = dup_Env(frame->env);
  new_frame->parent = frame;
  
  for (size_t i = 0; i < argc; i++) {
    vec_push(new_frame->args, pop_Stack(stack));
  }
  
  new_frame->v_ins = vmf->code;
  
  #ifdef __ENABLE_DIRECT_THREADED_CODE__
    push_Stack(frame_stack, new_GeneralPointer((void **)ops_ptr, NULL));
    if (vmf->ops_ptr == NULL) {
      vmf->ops_ptr = gen_table(table, table_len, vmf->code, &&L_end);
    }
    ops_ptr = vmf->ops_ptr;
  #endif
  push_Stack(frame_stack, new_GeneralPointer(frame, NULL));
  frame = new_frame;
  reg = new_frame->registers;
}"""
[OpReturn]
code = """{
  free_Frame(frame);
  POP_STACK_WITH_FREE(frame_stack, frame);
  reg = frame->registers;
  #ifdef __ENABLE_DIRECT_THREADED_CODE__
    POP_STACK_WITH_FREE(frame_stack, ops_ptr);
  #endif
}"""
[OpVarDef]
code = """{
  sds var_name = (sds)frame->v_ins->data[reg->pc++]->ptr;
  VMValue *v;
  POP_STACK_WITH_FREE(stack, v);
  insert_Env(frame->env, var_name, v);
}"""
[OpGetVar]
code = """{
  sds var_name = (sds)frame->v_ins->data[reg->pc++]->ptr;
  VMValue *v = get_Env(frame->env, var_name);
  push_Stack(stack, new_GeneralPointer(v, (ELEM_DESTRUCTOR)&free_VMValue));
}"""
[OpSetVar]
code = """{
  sds var_name = (sds)frame->v_ins->data[reg->pc++]->ptr;
  VMValue *v; POP_STACK_WITH_FREE(stack, v);
  insert_Env(frame->env, var_name, v);
}"""
[OpBranch]
code = """{
  long long int tBlock_len = (long long int)(intptr_t)frame->v_ins->data[reg->pc++]->ptr;
  SexpObject *cond_result = pop_SexpObject_from_stack(stack);
  assert(cond_result->ty == bool_ty);
  
  if (!cond_result->bool_val) {
    reg->pc += tBlock_len;
  }
}"""
[OpMakeList]
code = """{
  long long int list_len = (long long int)(intptr_t)frame->v_ins->data[reg->pc++]->ptr;
  Vector *list = new_vec_with(list_len);
  list->len = list_len;
  
  for (long long int i = list_len - 1; i >= 0; i--) {
    list->data[i] = pop_Stack(stack);
  }

  push_Stack_VValue(stack, new_SexpObject_list(list));
}"""
[OpSetArgFrom]
code = """{
  sds arg_name = (sds)frame->v_ins->data[reg->pc++]->ptr;
  size_t arg_idx = (size_t)(intptr_t)frame->v_ins->data[reg->pc++]->ptr;
  assert(arg_idx < frame->args->len);
  insert_Env(frame->env, arg_name, frame->args->data[arg_idx]->ptr);
}"""
[OpDumpEnv]
code = """{
  Vector *keys = avl_keys(frame->env->vars, (ELEM_FREE)&sdsfree);
  for (size_t i = 0; i < keys->len; i++) {
    sds key = (sds)keys->data[i]->ptr;
    VMValue *v = get_Env(frame->env, key);
    printf("%s - %s\\n", key, v->ty == VValue ? "VValue" : "VFunc");
  }
  free_vec(keys);
}"""
